/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2519.0, "minX": 0.0, "maxY": 44406.0, "series": [{"data": [[0.0, 2519.0], [0.1, 2519.0], [0.2, 3401.0], [0.3, 3401.0], [0.4, 3787.0], [0.5, 3787.0], [0.6, 3787.0], [0.7, 4033.0], [0.8, 4173.0], [0.9, 4173.0], [1.0, 4206.0], [1.1, 4206.0], [1.2, 4258.0], [1.3, 4258.0], [1.4, 4419.0], [1.5, 4419.0], [1.6, 4526.0], [1.7, 4526.0], [1.8, 4662.0], [1.9, 4662.0], [2.0, 4741.0], [2.1, 4741.0], [2.2, 4985.0], [2.3, 4985.0], [2.4, 5111.0], [2.5, 5111.0], [2.6, 5115.0], [2.7, 5115.0], [2.8, 5115.0], [2.9, 5121.0], [3.0, 5121.0], [3.1, 5418.0], [3.2, 5418.0], [3.3, 5771.0], [3.4, 5771.0], [3.5, 5846.0], [3.6, 5846.0], [3.7, 5874.0], [3.8, 5874.0], [3.9, 5940.0], [4.0, 5940.0], [4.1, 6206.0], [4.2, 6206.0], [4.3, 6315.0], [4.4, 6315.0], [4.5, 6344.0], [4.6, 6344.0], [4.7, 6382.0], [4.8, 6382.0], [4.9, 6432.0], [5.0, 6432.0], [5.1, 6475.0], [5.2, 6475.0], [5.3, 7656.0], [5.4, 7656.0], [5.5, 7742.0], [5.6, 7742.0], [5.7, 7797.0], [5.8, 7797.0], [5.9, 7867.0], [6.0, 7867.0], [6.1, 7873.0], [6.2, 7873.0], [6.3, 8054.0], [6.4, 8054.0], [6.5, 8150.0], [6.6, 8150.0], [6.7, 8323.0], [6.8, 8323.0], [6.9, 8571.0], [7.0, 8571.0], [7.1, 9368.0], [7.2, 9368.0], [7.3, 9378.0], [7.4, 9378.0], [7.5, 9425.0], [7.6, 9425.0], [7.7, 9499.0], [7.8, 9499.0], [7.9, 9715.0], [8.0, 9715.0], [8.1, 9755.0], [8.2, 9755.0], [8.3, 9773.0], [8.4, 9773.0], [8.5, 10149.0], [8.6, 10149.0], [8.7, 10186.0], [8.8, 11234.0], [8.9, 11234.0], [9.0, 11324.0], [9.1, 11324.0], [9.2, 11681.0], [9.3, 11681.0], [9.4, 11724.0], [9.5, 11724.0], [9.6, 11847.0], [9.7, 11847.0], [9.8, 11996.0], [9.9, 11996.0], [10.0, 12014.0], [10.1, 12014.0], [10.2, 12213.0], [10.3, 12213.0], [10.4, 12331.0], [10.5, 12331.0], [10.6, 12628.0], [10.7, 12628.0], [10.8, 12976.0], [10.9, 12976.0], [11.0, 13249.0], [11.1, 13249.0], [11.2, 13400.0], [11.3, 13400.0], [11.4, 13533.0], [11.5, 13533.0], [11.6, 14386.0], [11.7, 14386.0], [11.8, 14502.0], [11.9, 14502.0], [12.0, 14536.0], [12.1, 14536.0], [12.2, 14675.0], [12.3, 14675.0], [12.4, 15025.0], [12.5, 15025.0], [12.6, 15129.0], [12.7, 15129.0], [12.8, 15230.0], [12.9, 15230.0], [13.0, 15429.0], [13.1, 15429.0], [13.2, 15431.0], [13.3, 15431.0], [13.4, 15434.0], [13.5, 15434.0], [13.6, 15463.0], [13.7, 15463.0], [13.8, 15495.0], [13.9, 15495.0], [14.0, 15588.0], [14.1, 15588.0], [14.2, 15621.0], [14.3, 15621.0], [14.4, 15736.0], [14.5, 15736.0], [14.6, 15740.0], [14.7, 15740.0], [14.8, 15879.0], [14.9, 15879.0], [15.0, 15941.0], [15.1, 15941.0], [15.2, 16007.0], [15.3, 16007.0], [15.4, 16074.0], [15.5, 16074.0], [15.6, 16152.0], [15.7, 16152.0], [15.8, 16274.0], [15.9, 16274.0], [16.0, 16300.0], [16.1, 16300.0], [16.2, 16325.0], [16.3, 16325.0], [16.4, 16366.0], [16.5, 16366.0], [16.6, 16448.0], [16.7, 16448.0], [16.8, 16561.0], [16.9, 16561.0], [17.0, 16732.0], [17.1, 16732.0], [17.2, 16739.0], [17.3, 16739.0], [17.4, 16804.0], [17.5, 16804.0], [17.6, 16844.0], [17.7, 16844.0], [17.8, 16920.0], [17.9, 16920.0], [18.0, 17032.0], [18.1, 17032.0], [18.2, 17088.0], [18.3, 17088.0], [18.4, 17116.0], [18.5, 17116.0], [18.6, 17189.0], [18.7, 17189.0], [18.8, 17228.0], [18.9, 17228.0], [19.0, 17360.0], [19.1, 17360.0], [19.2, 17398.0], [19.3, 17398.0], [19.4, 17416.0], [19.5, 17416.0], [19.6, 17425.0], [19.7, 17425.0], [19.8, 17427.0], [19.9, 17427.0], [20.0, 17441.0], [20.1, 17441.0], [20.2, 17536.0], [20.3, 17536.0], [20.4, 17581.0], [20.5, 17581.0], [20.6, 17646.0], [20.7, 17646.0], [20.8, 17893.0], [20.9, 17893.0], [21.0, 17919.0], [21.1, 17919.0], [21.2, 17958.0], [21.3, 17958.0], [21.4, 18140.0], [21.5, 18140.0], [21.6, 18234.0], [21.7, 18234.0], [21.8, 18243.0], [21.9, 18243.0], [22.0, 18303.0], [22.1, 18303.0], [22.2, 18430.0], [22.3, 18430.0], [22.4, 18436.0], [22.5, 18436.0], [22.6, 18502.0], [22.7, 18502.0], [22.8, 18650.0], [22.9, 18650.0], [23.0, 18699.0], [23.1, 18699.0], [23.2, 18755.0], [23.3, 18755.0], [23.4, 18777.0], [23.5, 18777.0], [23.6, 18784.0], [23.7, 18784.0], [23.8, 18895.0], [23.9, 18895.0], [24.0, 18935.0], [24.1, 18935.0], [24.2, 18956.0], [24.3, 18956.0], [24.4, 18980.0], [24.5, 18980.0], [24.6, 18993.0], [24.7, 18993.0], [24.8, 19055.0], [24.9, 19055.0], [25.0, 19120.0], [25.1, 19120.0], [25.2, 19263.0], [25.3, 19263.0], [25.4, 19270.0], [25.5, 19270.0], [25.6, 19287.0], [25.7, 19287.0], [25.8, 19359.0], [25.9, 19359.0], [26.0, 19367.0], [26.1, 19367.0], [26.2, 19518.0], [26.3, 19518.0], [26.4, 19523.0], [26.5, 19523.0], [26.6, 19567.0], [26.7, 19567.0], [26.8, 19597.0], [26.9, 19597.0], [27.0, 19624.0], [27.1, 19624.0], [27.2, 19714.0], [27.3, 19714.0], [27.4, 19771.0], [27.5, 19771.0], [27.6, 19842.0], [27.7, 19842.0], [27.8, 19874.0], [27.9, 19874.0], [28.0, 19932.0], [28.1, 19932.0], [28.2, 20099.0], [28.3, 20099.0], [28.4, 20103.0], [28.5, 20103.0], [28.6, 20135.0], [28.7, 20135.0], [28.8, 20183.0], [28.9, 20183.0], [29.0, 20195.0], [29.1, 20195.0], [29.2, 20237.0], [29.3, 20237.0], [29.4, 20271.0], [29.5, 20271.0], [29.6, 20302.0], [29.7, 20302.0], [29.8, 20354.0], [29.9, 20354.0], [30.0, 20456.0], [30.1, 20456.0], [30.2, 20474.0], [30.3, 20474.0], [30.4, 20558.0], [30.5, 20558.0], [30.6, 20581.0], [30.7, 20581.0], [30.8, 20669.0], [30.9, 20669.0], [31.0, 20680.0], [31.1, 20680.0], [31.2, 20685.0], [31.3, 20685.0], [31.4, 20735.0], [31.5, 20735.0], [31.6, 20767.0], [31.7, 20767.0], [31.8, 20794.0], [31.9, 20794.0], [32.0, 20971.0], [32.1, 20971.0], [32.2, 21188.0], [32.3, 21188.0], [32.4, 21303.0], [32.5, 21303.0], [32.6, 21325.0], [32.7, 21325.0], [32.8, 21379.0], [32.9, 21379.0], [33.0, 21446.0], [33.1, 21446.0], [33.2, 21498.0], [33.3, 21498.0], [33.4, 21514.0], [33.5, 21514.0], [33.6, 21574.0], [33.7, 21574.0], [33.8, 21599.0], [33.9, 21599.0], [34.0, 21632.0], [34.1, 21632.0], [34.2, 21654.0], [34.3, 21654.0], [34.4, 21655.0], [34.5, 21655.0], [34.6, 21720.0], [34.7, 21720.0], [34.8, 21775.0], [34.9, 21775.0], [35.0, 21845.0], [35.1, 21845.0], [35.2, 22026.0], [35.3, 22026.0], [35.4, 22039.0], [35.5, 22039.0], [35.6, 22145.0], [35.7, 22145.0], [35.8, 22149.0], [35.9, 22149.0], [36.0, 22180.0], [36.1, 22180.0], [36.2, 22190.0], [36.3, 22190.0], [36.4, 22462.0], [36.5, 22462.0], [36.6, 22570.0], [36.7, 22570.0], [36.8, 22652.0], [36.9, 22652.0], [37.0, 22710.0], [37.1, 22710.0], [37.2, 22732.0], [37.3, 22732.0], [37.4, 22746.0], [37.5, 22746.0], [37.6, 22759.0], [37.7, 22759.0], [37.8, 22948.0], [37.9, 22948.0], [38.0, 22953.0], [38.1, 22953.0], [38.2, 22957.0], [38.3, 22957.0], [38.4, 22957.0], [38.5, 22980.0], [38.6, 22980.0], [38.7, 23044.0], [38.8, 23044.0], [38.9, 23051.0], [39.0, 23051.0], [39.1, 23281.0], [39.2, 23281.0], [39.3, 23343.0], [39.4, 23343.0], [39.5, 23353.0], [39.6, 23353.0], [39.7, 23372.0], [39.8, 23372.0], [39.9, 23396.0], [40.0, 23396.0], [40.1, 23468.0], [40.2, 23468.0], [40.3, 23513.0], [40.4, 23513.0], [40.5, 23626.0], [40.6, 23626.0], [40.7, 23632.0], [40.8, 23632.0], [40.9, 23647.0], [41.0, 23647.0], [41.1, 23777.0], [41.2, 23777.0], [41.3, 23861.0], [41.4, 23861.0], [41.5, 23927.0], [41.6, 23927.0], [41.7, 23995.0], [41.8, 23995.0], [41.9, 24022.0], [42.0, 24022.0], [42.1, 24024.0], [42.2, 24024.0], [42.3, 24075.0], [42.4, 24075.0], [42.5, 24139.0], [42.6, 24139.0], [42.7, 24195.0], [42.8, 24195.0], [42.9, 24228.0], [43.0, 24228.0], [43.1, 24309.0], [43.2, 24309.0], [43.3, 24355.0], [43.4, 24355.0], [43.5, 24358.0], [43.6, 24358.0], [43.7, 24414.0], [43.8, 24414.0], [43.9, 24465.0], [44.0, 24465.0], [44.1, 24550.0], [44.2, 24550.0], [44.3, 24563.0], [44.4, 24563.0], [44.5, 24635.0], [44.6, 24635.0], [44.7, 24775.0], [44.8, 24775.0], [44.9, 24815.0], [45.0, 24815.0], [45.1, 24886.0], [45.2, 24886.0], [45.3, 24921.0], [45.4, 24921.0], [45.5, 24965.0], [45.6, 24965.0], [45.7, 25014.0], [45.8, 25014.0], [45.9, 25038.0], [46.0, 25038.0], [46.1, 25044.0], [46.2, 25044.0], [46.3, 25176.0], [46.4, 25176.0], [46.5, 25185.0], [46.6, 25185.0], [46.7, 25270.0], [46.8, 25270.0], [46.9, 25283.0], [47.0, 25283.0], [47.1, 25338.0], [47.2, 25338.0], [47.3, 25423.0], [47.4, 25423.0], [47.5, 25429.0], [47.6, 25429.0], [47.7, 25446.0], [47.8, 25446.0], [47.9, 25496.0], [48.0, 25496.0], [48.1, 25651.0], [48.2, 25651.0], [48.3, 25668.0], [48.4, 25668.0], [48.5, 25681.0], [48.6, 25681.0], [48.7, 25800.0], [48.8, 25800.0], [48.9, 25817.0], [49.0, 25817.0], [49.1, 25821.0], [49.2, 25821.0], [49.3, 25866.0], [49.4, 25866.0], [49.5, 25905.0], [49.6, 25905.0], [49.7, 25966.0], [49.8, 25966.0], [49.9, 25985.0], [50.0, 25985.0], [50.1, 26005.0], [50.2, 26005.0], [50.3, 26065.0], [50.4, 26065.0], [50.5, 26251.0], [50.6, 26251.0], [50.7, 26317.0], [50.8, 26317.0], [50.9, 26374.0], [51.0, 26374.0], [51.1, 26464.0], [51.2, 26464.0], [51.3, 26498.0], [51.4, 26498.0], [51.5, 26599.0], [51.6, 26599.0], [51.7, 26600.0], [51.8, 26600.0], [51.9, 26642.0], [52.0, 26642.0], [52.1, 26660.0], [52.2, 26660.0], [52.3, 26750.0], [52.4, 26750.0], [52.5, 26767.0], [52.6, 26767.0], [52.7, 26815.0], [52.8, 26815.0], [52.9, 26886.0], [53.0, 26886.0], [53.1, 27009.0], [53.2, 27009.0], [53.3, 27106.0], [53.4, 27106.0], [53.5, 27219.0], [53.6, 27219.0], [53.7, 27241.0], [53.8, 27241.0], [53.9, 27309.0], [54.0, 27309.0], [54.1, 27311.0], [54.2, 27311.0], [54.3, 27381.0], [54.4, 27381.0], [54.5, 27453.0], [54.6, 27453.0], [54.7, 27515.0], [54.8, 27515.0], [54.9, 27549.0], [55.0, 27549.0], [55.1, 27576.0], [55.2, 27576.0], [55.3, 27626.0], [55.4, 27626.0], [55.5, 27661.0], [55.6, 27661.0], [55.7, 27715.0], [55.8, 27715.0], [55.9, 27813.0], [56.0, 27813.0], [56.1, 27881.0], [56.2, 27881.0], [56.3, 27923.0], [56.4, 27923.0], [56.5, 27981.0], [56.6, 27981.0], [56.7, 28082.0], [56.8, 28082.0], [56.9, 28211.0], [57.0, 28211.0], [57.1, 28262.0], [57.2, 28262.0], [57.3, 28316.0], [57.4, 28316.0], [57.5, 28423.0], [57.6, 28423.0], [57.7, 28565.0], [57.8, 28565.0], [57.9, 28621.0], [58.0, 28621.0], [58.1, 28634.0], [58.2, 28634.0], [58.3, 28777.0], [58.4, 28777.0], [58.5, 28794.0], [58.6, 28794.0], [58.7, 28870.0], [58.8, 28870.0], [58.9, 29120.0], [59.0, 29120.0], [59.1, 29158.0], [59.2, 29158.0], [59.3, 29280.0], [59.4, 29280.0], [59.5, 29371.0], [59.6, 29371.0], [59.7, 29377.0], [59.8, 29377.0], [59.9, 29484.0], [60.0, 29484.0], [60.1, 29538.0], [60.2, 29538.0], [60.3, 29553.0], [60.4, 29553.0], [60.5, 29579.0], [60.6, 29579.0], [60.7, 29626.0], [60.8, 29626.0], [60.9, 29641.0], [61.0, 29641.0], [61.1, 29680.0], [61.2, 29680.0], [61.3, 29736.0], [61.4, 29736.0], [61.5, 29828.0], [61.6, 29828.0], [61.7, 29839.0], [61.8, 29839.0], [61.9, 29875.0], [62.0, 29875.0], [62.1, 29946.0], [62.2, 29946.0], [62.3, 29997.0], [62.4, 29997.0], [62.5, 30039.0], [62.6, 30039.0], [62.7, 30048.0], [62.8, 30048.0], [62.9, 30069.0], [63.0, 30069.0], [63.1, 30077.0], [63.2, 30077.0], [63.3, 30101.0], [63.4, 30101.0], [63.5, 30130.0], [63.6, 30130.0], [63.7, 30342.0], [63.8, 30342.0], [63.9, 30382.0], [64.0, 30382.0], [64.1, 30389.0], [64.2, 30389.0], [64.3, 30438.0], [64.4, 30438.0], [64.5, 30515.0], [64.6, 30515.0], [64.7, 30621.0], [64.8, 30621.0], [64.9, 30697.0], [65.0, 30697.0], [65.1, 30820.0], [65.2, 30820.0], [65.3, 30875.0], [65.4, 30875.0], [65.5, 30895.0], [65.6, 30895.0], [65.7, 30996.0], [65.8, 30996.0], [65.9, 30996.0], [66.0, 30996.0], [66.1, 31016.0], [66.2, 31016.0], [66.3, 31017.0], [66.4, 31017.0], [66.5, 31080.0], [66.6, 31080.0], [66.7, 31113.0], [66.8, 31113.0], [66.9, 31147.0], [67.0, 31147.0], [67.1, 31154.0], [67.2, 31154.0], [67.3, 31305.0], [67.4, 31305.0], [67.5, 31389.0], [67.6, 31389.0], [67.7, 31467.0], [67.8, 31467.0], [67.9, 31471.0], [68.0, 31471.0], [68.1, 31493.0], [68.2, 31493.0], [68.3, 31541.0], [68.4, 31541.0], [68.5, 31563.0], [68.6, 31563.0], [68.7, 31652.0], [68.8, 31652.0], [68.9, 31671.0], [69.0, 31671.0], [69.1, 31717.0], [69.2, 31717.0], [69.3, 31799.0], [69.4, 31799.0], [69.5, 31847.0], [69.6, 31847.0], [69.7, 31877.0], [69.8, 31877.0], [69.9, 31929.0], [70.0, 31929.0], [70.1, 31939.0], [70.2, 31939.0], [70.3, 32224.0], [70.4, 32224.0], [70.5, 32281.0], [70.6, 32281.0], [70.7, 32371.0], [70.8, 32371.0], [70.9, 32380.0], [71.0, 32380.0], [71.1, 32472.0], [71.2, 32472.0], [71.3, 32605.0], [71.4, 32605.0], [71.5, 32680.0], [71.6, 32680.0], [71.7, 32699.0], [71.8, 32699.0], [71.9, 32725.0], [72.0, 32725.0], [72.1, 32886.0], [72.2, 32886.0], [72.3, 32911.0], [72.4, 32911.0], [72.5, 33054.0], [72.6, 33054.0], [72.7, 33088.0], [72.8, 33088.0], [72.9, 33140.0], [73.0, 33140.0], [73.1, 33147.0], [73.2, 33147.0], [73.3, 33210.0], [73.4, 33210.0], [73.5, 33228.0], [73.6, 33228.0], [73.7, 33244.0], [73.8, 33244.0], [73.9, 33265.0], [74.0, 33265.0], [74.1, 33295.0], [74.2, 33295.0], [74.3, 33300.0], [74.4, 33300.0], [74.5, 33321.0], [74.6, 33321.0], [74.7, 33342.0], [74.8, 33342.0], [74.9, 33366.0], [75.0, 33366.0], [75.1, 33421.0], [75.2, 33421.0], [75.3, 33442.0], [75.4, 33442.0], [75.5, 33497.0], [75.6, 33497.0], [75.7, 33584.0], [75.8, 33584.0], [75.9, 33633.0], [76.0, 33633.0], [76.1, 33687.0], [76.2, 33687.0], [76.3, 33704.0], [76.4, 33704.0], [76.5, 33840.0], [76.6, 33840.0], [76.7, 33855.0], [76.8, 33855.0], [76.9, 33890.0], [77.0, 33890.0], [77.1, 34041.0], [77.2, 34041.0], [77.3, 34173.0], [77.4, 34173.0], [77.5, 34205.0], [77.6, 34205.0], [77.7, 34207.0], [77.8, 34207.0], [77.9, 34287.0], [78.0, 34287.0], [78.1, 34338.0], [78.2, 34338.0], [78.3, 34424.0], [78.4, 34424.0], [78.5, 34434.0], [78.6, 34434.0], [78.7, 34554.0], [78.8, 34554.0], [78.9, 34640.0], [79.0, 34640.0], [79.1, 34678.0], [79.2, 34678.0], [79.3, 34693.0], [79.4, 34693.0], [79.5, 34701.0], [79.6, 34701.0], [79.7, 34753.0], [79.8, 34753.0], [79.9, 34795.0], [80.0, 34795.0], [80.1, 34817.0], [80.2, 34817.0], [80.3, 34912.0], [80.4, 34912.0], [80.5, 34954.0], [80.6, 34954.0], [80.7, 35195.0], [80.8, 35195.0], [80.9, 35223.0], [81.0, 35223.0], [81.1, 35245.0], [81.2, 35245.0], [81.3, 35262.0], [81.4, 35262.0], [81.5, 35323.0], [81.6, 35323.0], [81.7, 35455.0], [81.8, 35455.0], [81.9, 35517.0], [82.0, 35517.0], [82.1, 35565.0], [82.2, 35565.0], [82.3, 35727.0], [82.4, 35727.0], [82.5, 35761.0], [82.6, 35761.0], [82.7, 35813.0], [82.8, 35813.0], [82.9, 35824.0], [83.0, 35824.0], [83.1, 36001.0], [83.2, 36001.0], [83.3, 36052.0], [83.4, 36052.0], [83.5, 36057.0], [83.6, 36057.0], [83.7, 36058.0], [83.8, 36058.0], [83.9, 36101.0], [84.0, 36101.0], [84.1, 36214.0], [84.2, 36214.0], [84.3, 36356.0], [84.4, 36356.0], [84.5, 36388.0], [84.6, 36388.0], [84.7, 36410.0], [84.8, 36410.0], [84.9, 36421.0], [85.0, 36421.0], [85.1, 36435.0], [85.2, 36435.0], [85.3, 36569.0], [85.4, 36569.0], [85.5, 36587.0], [85.6, 36587.0], [85.7, 36878.0], [85.8, 36878.0], [85.9, 36885.0], [86.0, 36885.0], [86.1, 36907.0], [86.2, 36907.0], [86.3, 36938.0], [86.4, 36938.0], [86.5, 37162.0], [86.6, 37162.0], [86.7, 37247.0], [86.8, 37247.0], [86.9, 37490.0], [87.0, 37490.0], [87.1, 37517.0], [87.2, 37517.0], [87.3, 37554.0], [87.4, 37554.0], [87.5, 37630.0], [87.6, 37630.0], [87.7, 37710.0], [87.8, 37710.0], [87.9, 37927.0], [88.0, 37927.0], [88.1, 37999.0], [88.2, 37999.0], [88.3, 38061.0], [88.4, 38061.0], [88.5, 38087.0], [88.6, 38087.0], [88.7, 38261.0], [88.8, 38261.0], [88.9, 38339.0], [89.0, 38339.0], [89.1, 38376.0], [89.2, 38376.0], [89.3, 38479.0], [89.4, 38479.0], [89.5, 38611.0], [89.6, 38611.0], [89.7, 38636.0], [89.8, 38636.0], [89.9, 38962.0], [90.0, 38962.0], [90.1, 39029.0], [90.2, 39029.0], [90.3, 39092.0], [90.4, 39092.0], [90.5, 39231.0], [90.6, 39231.0], [90.7, 39338.0], [90.8, 39338.0], [90.9, 39421.0], [91.0, 39421.0], [91.1, 39451.0], [91.2, 39451.0], [91.3, 39480.0], [91.4, 39480.0], [91.5, 39594.0], [91.6, 39594.0], [91.7, 39606.0], [91.8, 39606.0], [91.9, 39633.0], [92.0, 39633.0], [92.1, 39639.0], [92.2, 39639.0], [92.3, 39644.0], [92.4, 39644.0], [92.5, 39911.0], [92.6, 39911.0], [92.7, 40042.0], [92.8, 40042.0], [92.9, 40127.0], [93.0, 40127.0], [93.1, 40136.0], [93.2, 40136.0], [93.3, 40152.0], [93.4, 40152.0], [93.5, 40198.0], [93.6, 40198.0], [93.7, 40292.0], [93.8, 40292.0], [93.9, 40458.0], [94.0, 40458.0], [94.1, 40608.0], [94.2, 40608.0], [94.3, 40666.0], [94.4, 40666.0], [94.5, 40775.0], [94.6, 40775.0], [94.7, 40824.0], [94.8, 40824.0], [94.9, 41007.0], [95.0, 41007.0], [95.1, 41252.0], [95.2, 41252.0], [95.3, 41281.0], [95.4, 41281.0], [95.5, 41285.0], [95.6, 41285.0], [95.7, 41321.0], [95.8, 41321.0], [95.9, 41369.0], [96.0, 41369.0], [96.1, 41375.0], [96.2, 41375.0], [96.3, 41519.0], [96.4, 41519.0], [96.5, 41689.0], [96.6, 41689.0], [96.7, 41698.0], [96.8, 41698.0], [96.9, 42439.0], [97.0, 42439.0], [97.1, 42504.0], [97.2, 42504.0], [97.3, 42850.0], [97.4, 42850.0], [97.5, 42918.0], [97.6, 42918.0], [97.7, 43283.0], [97.8, 43283.0], [97.9, 43372.0], [98.0, 43372.0], [98.1, 43461.0], [98.2, 43461.0], [98.3, 43552.0], [98.4, 43552.0], [98.5, 43627.0], [98.6, 43627.0], [98.7, 43728.0], [98.8, 43728.0], [98.9, 43796.0], [99.0, 43796.0], [99.1, 43939.0], [99.2, 43939.0], [99.3, 44064.0], [99.4, 44064.0], [99.5, 44067.0], [99.6, 44067.0], [99.7, 44157.0], [99.8, 44157.0], [99.9, 44406.0], [100.0, 44406.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2500.0, "maxY": 5.0, "series": [{"data": [[33300.0, 4.0], [32900.0, 1.0], [34100.0, 1.0], [34500.0, 1.0], [33700.0, 1.0], [35700.0, 2.0], [36100.0, 1.0], [34900.0, 2.0], [35300.0, 1.0], [36500.0, 2.0], [36900.0, 2.0], [37700.0, 1.0], [38900.0, 1.0], [39300.0, 1.0], [40100.0, 4.0], [41300.0, 3.0], [42500.0, 1.0], [42900.0, 1.0], [43700.0, 2.0], [43300.0, 1.0], [44100.0, 1.0], [2500.0, 1.0], [3400.0, 1.0], [3700.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 2.0], [4500.0, 1.0], [4600.0, 1.0], [4400.0, 1.0], [4700.0, 1.0], [4900.0, 1.0], [5100.0, 3.0], [5400.0, 1.0], [5800.0, 2.0], [5700.0, 1.0], [5900.0, 1.0], [6300.0, 3.0], [6200.0, 1.0], [6400.0, 2.0], [7600.0, 1.0], [7700.0, 2.0], [7800.0, 2.0], [8100.0, 1.0], [8000.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [9300.0, 2.0], [9400.0, 2.0], [9700.0, 3.0], [10100.0, 2.0], [11200.0, 1.0], [11300.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12600.0, 1.0], [13200.0, 1.0], [12900.0, 1.0], [13400.0, 1.0], [13500.0, 1.0], [14300.0, 1.0], [14600.0, 1.0], [14500.0, 2.0], [15000.0, 1.0], [15100.0, 1.0], [15200.0, 1.0], [15600.0, 1.0], [15400.0, 5.0], [15500.0, 1.0], [15700.0, 2.0], [15800.0, 1.0], [16000.0, 2.0], [16300.0, 3.0], [15900.0, 1.0], [16200.0, 1.0], [16100.0, 1.0], [17000.0, 2.0], [17400.0, 4.0], [16800.0, 2.0], [16400.0, 1.0], [17200.0, 1.0], [17600.0, 1.0], [18200.0, 2.0], [18400.0, 2.0], [17800.0, 1.0], [18600.0, 2.0], [19000.0, 1.0], [18800.0, 1.0], [19200.0, 3.0], [20200.0, 2.0], [19600.0, 1.0], [19800.0, 2.0], [20000.0, 1.0], [20400.0, 2.0], [20600.0, 3.0], [21400.0, 2.0], [21800.0, 1.0], [22000.0, 2.0], [21600.0, 3.0], [22400.0, 1.0], [22600.0, 1.0], [23200.0, 1.0], [23000.0, 2.0], [23400.0, 1.0], [24400.0, 2.0], [24000.0, 3.0], [23600.0, 3.0], [24200.0, 1.0], [23800.0, 1.0], [25400.0, 4.0], [25200.0, 2.0], [24600.0, 1.0], [25000.0, 3.0], [24800.0, 2.0], [25600.0, 3.0], [25800.0, 4.0], [26200.0, 1.0], [26000.0, 2.0], [26400.0, 2.0], [26600.0, 3.0], [27600.0, 2.0], [27400.0, 1.0], [26800.0, 2.0], [27000.0, 1.0], [27200.0, 2.0], [28200.0, 2.0], [28600.0, 2.0], [27800.0, 2.0], [28000.0, 1.0], [28400.0, 1.0], [29400.0, 1.0], [29200.0, 1.0], [28800.0, 1.0], [29600.0, 3.0], [30000.0, 4.0], [29800.0, 3.0], [30400.0, 1.0], [30600.0, 2.0], [30800.0, 3.0], [31000.0, 3.0], [31400.0, 3.0], [31600.0, 2.0], [32600.0, 3.0], [31800.0, 2.0], [32200.0, 2.0], [32400.0, 1.0], [34400.0, 2.0], [33200.0, 5.0], [33600.0, 2.0], [34000.0, 1.0], [32800.0, 1.0], [34800.0, 1.0], [35200.0, 3.0], [36000.0, 4.0], [36800.0, 2.0], [36400.0, 3.0], [37200.0, 1.0], [37600.0, 1.0], [38000.0, 2.0], [38400.0, 1.0], [39600.0, 4.0], [40400.0, 1.0], [40800.0, 1.0], [39200.0, 1.0], [40000.0, 1.0], [41600.0, 2.0], [42800.0, 1.0], [41200.0, 3.0], [42400.0, 1.0], [43200.0, 1.0], [44000.0, 2.0], [44400.0, 1.0], [43600.0, 1.0], [33100.0, 2.0], [34700.0, 3.0], [33500.0, 1.0], [34300.0, 1.0], [35100.0, 1.0], [35500.0, 2.0], [36300.0, 2.0], [37100.0, 1.0], [37500.0, 2.0], [37900.0, 2.0], [38300.0, 2.0], [39900.0, 1.0], [40700.0, 1.0], [39500.0, 1.0], [41500.0, 1.0], [43500.0, 1.0], [43900.0, 1.0], [16500.0, 1.0], [16900.0, 1.0], [17300.0, 2.0], [16700.0, 2.0], [17100.0, 2.0], [17500.0, 2.0], [18300.0, 1.0], [17900.0, 2.0], [18100.0, 1.0], [18500.0, 1.0], [18900.0, 4.0], [19300.0, 2.0], [18700.0, 3.0], [19100.0, 1.0], [19700.0, 2.0], [19500.0, 4.0], [20100.0, 4.0], [20300.0, 2.0], [19900.0, 1.0], [21300.0, 3.0], [20500.0, 2.0], [20700.0, 3.0], [21500.0, 3.0], [20900.0, 1.0], [21100.0, 1.0], [21700.0, 2.0], [22100.0, 4.0], [22500.0, 1.0], [23300.0, 4.0], [22900.0, 4.0], [22700.0, 4.0], [23500.0, 1.0], [23900.0, 2.0], [24100.0, 2.0], [24500.0, 2.0], [23700.0, 1.0], [24300.0, 3.0], [24900.0, 2.0], [24700.0, 1.0], [25100.0, 2.0], [25300.0, 1.0], [25900.0, 3.0], [26500.0, 1.0], [26300.0, 2.0], [27500.0, 3.0], [27300.0, 3.0], [27100.0, 1.0], [26700.0, 2.0], [28300.0, 1.0], [27700.0, 1.0], [27900.0, 2.0], [28500.0, 1.0], [29100.0, 2.0], [29300.0, 2.0], [29500.0, 3.0], [28700.0, 2.0], [29900.0, 2.0], [30300.0, 3.0], [30100.0, 2.0], [29700.0, 1.0], [30500.0, 1.0], [31700.0, 2.0], [31100.0, 3.0], [30900.0, 2.0], [31300.0, 2.0], [31500.0, 2.0], [32300.0, 2.0], [31900.0, 2.0], [32700.0, 1.0], [33800.0, 3.0], [34600.0, 3.0], [33000.0, 2.0], [34200.0, 3.0], [33400.0, 3.0], [35800.0, 2.0], [35400.0, 1.0], [36200.0, 1.0], [37400.0, 1.0], [38200.0, 1.0], [38600.0, 2.0], [39000.0, 2.0], [40200.0, 1.0], [40600.0, 2.0], [39400.0, 3.0], [41000.0, 1.0], [43400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 62.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 438.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 62.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 438.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 46.134328358208975, "minX": 1.6598583E12, "maxY": 117.89024390243904, "series": [{"data": [[1.65985836E12, 117.89024390243904], [1.6598583E12, 46.134328358208975], [1.65985842E12, 88.74331550802144]], "isOverall": false, "label": "ThreadGroup500user100Sec", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65985842E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10453.0, "minX": 1.0, "maxY": 44406.0, "series": [{"data": [[2.0, 42918.0], [3.0, 43461.0], [4.0, 43627.0], [5.0, 41007.0], [6.0, 43796.0], [7.0, 41321.0], [8.0, 44157.0], [9.0, 41689.0], [10.0, 39480.0], [11.0, 44406.0], [12.0, 41281.0], [13.0, 39594.0], [14.0, 44067.0], [15.0, 41252.0], [16.0, 39421.0], [17.0, 44064.0], [18.0, 41369.0], [19.0, 21323.0], [20.0, 43939.0], [21.0, 22343.0], [22.0, 10453.0], [23.0, 36569.0], [24.0, 43372.0], [25.0, 22462.0], [26.0, 13548.25], [27.0, 20911.5], [28.0, 18154.0], [29.0, 17038.666666666664], [30.0, 14695.5], [31.0, 36214.0], [33.0, 22578.5], [32.0, 43552.0], [34.0, 23010.5], [35.0, 16206.0], [37.0, 23701.5], [36.0, 43283.0], [39.0, 14019.0], [38.0, 39231.0], [40.0, 20033.666666666664], [41.0, 18187.0], [43.0, 35223.0], [42.0, 39092.0], [44.0, 20548.333333333336], [45.0, 18187.666666666664], [46.0, 24030.5], [47.0, 34817.0], [48.0, 15863.6], [49.0, 38611.0], [51.0, 22195.5], [50.0, 38261.0], [52.0, 20369.333333333336], [53.0, 25186.0], [54.0, 17177.25], [55.0, 16700.5], [56.0, 26694.5], [57.0, 19846.0], [59.0, 23803.5], [58.0, 37517.0], [61.0, 25624.0], [60.0, 40775.0], [63.0, 33687.0], [62.0, 36907.0], [67.0, 20921.666666666668], [66.0, 36878.0], [65.0, 38087.0], [64.0, 40824.0], [68.0, 27350.0], [71.0, 33342.0], [70.0, 36421.0], [69.0, 37710.0], [74.0, 24311.5], [75.0, 33210.0], [73.0, 37554.0], [72.0, 40458.0], [76.0, 27886.5], [79.0, 21143.333333333332], [78.0, 36058.0], [77.0, 37490.0], [80.0, 24521.333333333332], [81.0, 21189.0], [83.0, 33228.0], [82.0, 35824.0], [84.0, 25207.0], [85.0, 26992.5], [86.0, 22450.333333333332], [87.0, 26099.0], [89.0, 24887.0], [91.0, 33265.0], [90.0, 35323.0], [88.0, 39338.0], [92.0, 28839.5], [93.0, 24927.0], [94.0, 25679.0], [95.0, 32699.0], [98.0, 26327.5], [99.0, 29693.0], [97.0, 36001.0], [96.0, 38479.0], [103.0, 37630.0], [102.0, 32886.0], [101.0, 33442.0], [100.0, 35565.0], [104.0, 27544.5], [107.0, 26229.666666666668], [106.0, 31652.0], [105.0, 33300.0], [108.0, 27030.0], [110.0, 27697.0], [111.0, 37162.0], [109.0, 33054.0], [114.0, 25861.0], [113.0, 25922.833333333336], [115.0, 25003.25], [112.0, 34338.0], [116.0, 23175.964285714283], [117.0, 20681.1], [118.0, 28039.375000000004], [119.0, 24240.57142857143], [120.0, 23026.076923076915], [121.0, 24033.57894736842], [122.0, 22888.2], [123.0, 23461.0], [124.0, 24487.416666666664], [125.0, 26466.222222222223], [126.0, 23584.8], [127.0, 27170.0], [128.0, 27948.666666666668], [129.0, 26105.833333333332], [130.0, 27716.666666666668], [132.0, 30403.5], [133.0, 26495.428571428572], [135.0, 31918.0], [134.0, 27208.0], [131.0, 35262.0], [136.0, 30399.5], [138.0, 29751.333333333332], [139.0, 28956.0], [140.0, 28812.5], [141.0, 28141.75], [142.0, 30188.4], [143.0, 28243.666666666668], [137.0, 30130.0], [144.0, 28703.333333333336], [145.0, 30546.5], [146.0, 29579.0], [148.0, 28604.666666666668], [147.0, 30804.0], [151.0, 29905.5], [150.0, 33088.0], [149.0, 28777.0], [1.0, 42439.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[97.374, 25851.673999999966]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 151.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6598583E12, "maxY": 26564.083333333332, "series": [{"data": [[1.65985836E12, 12589.483333333334], [1.6598583E12, 26564.083333333332], [1.65985842E12, 8789.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65985836E12, 3.0], [1.6598583E12, 183.0], [1.65985842E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65985842E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9070.164179104475, "minX": 1.6598583E12, "maxY": 35061.877005347604, "series": [{"data": [[1.65985836E12, 23420.995934959352], [1.6598583E12, 9070.164179104475], [1.65985842E12, 35061.877005347604]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65985842E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6598583E12, "maxY": 7564.626865671642, "series": [{"data": [[1.65985836E12, 59.08536585365858], [1.6598583E12, 7564.626865671642], [1.65985842E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65985842E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8780.776119402984, "minX": 1.6598583E12, "maxY": 35061.77540106953, "series": [{"data": [[1.65985836E12, 23419.76016260162], [1.6598583E12, 8780.776119402984], [1.65985842E12, 35061.77540106953]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65985842E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2519.0, "minX": 1.6598583E12, "maxY": 14675.0, "series": [{"data": [[1.65985836E12, 14536.0], [1.6598583E12, 14675.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65985836E12, 14536.0], [1.6598583E12, 13194.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65985836E12, 14536.0], [1.6598583E12, 14675.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65985836E12, 14536.0], [1.6598583E12, 14300.699999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65985836E12, 14536.0], [1.6598583E12, 2519.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65985836E12, 14536.0], [1.6598583E12, 7873.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65985836E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2519.0, "minX": 1.0, "maxY": 31671.0, "series": [{"data": [[1.0, 2519.0], [4.0, 7761.5], [2.0, 9570.5], [5.0, 13533.0], [3.0, 7174.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 23369.5], [1.0, 18583.5], [4.0, 29139.0], [8.0, 23985.5], [5.0, 26620.5], [3.0, 31671.0], [6.0, 25304.0], [7.0, 21655.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 13532.0, "series": [{"data": [[1.0, 2487.0], [4.0, 7751.0], [2.0, 9568.5], [5.0, 13532.0], [3.0, 7171.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [1.0, 0.0], [4.0, 0.0], [8.0, 0.0], [5.0, 0.0], [3.0, 0.0], [6.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.6598583E12, "maxY": 5.016666666666667, "series": [{"data": [[1.65985836E12, 5.016666666666667], [1.6598583E12, 2.433333333333333], [1.65985842E12, 0.8833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65985842E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6598583E12, "maxY": 3.933333333333333, "series": [{"data": [[1.65985836E12, 0.016666666666666666], [1.6598583E12, 1.0166666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65985836E12, 0.15]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.65985836E12, 3.933333333333333], [1.6598583E12, 0.1], [1.65985842E12, 3.1166666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65985842E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6598583E12, "maxY": 4.083333333333333, "series": [{"data": [[1.65985836E12, 0.016666666666666666], [1.6598583E12, 1.0166666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65985836E12, 4.083333333333333], [1.6598583E12, 0.1], [1.65985842E12, 3.1166666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65985842E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6598583E12, "maxY": 4.083333333333333, "series": [{"data": [[1.65985836E12, 0.016666666666666666], [1.6598583E12, 1.0166666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65985836E12, 4.083333333333333], [1.6598583E12, 0.1], [1.65985842E12, 3.1166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65985842E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

